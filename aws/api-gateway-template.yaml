# AWS API Gateway CloudFormation Template
# This template creates an API Gateway using the OpenAPI specification
# with Lambda integration for the JWT Generator API

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple JWT Generator API Gateway with Lambda Integration'

Parameters:
  ApiName:
    Type: String
    Default: 'simple-jwt-generator-api'
    Description: 'Name of the API Gateway'
  
  StageName:
    Type: String
    Default: 'prod'
    Description: 'API Gateway stage name'
    AllowedValues:
      - dev
      - staging
      - prod
  
  LambdaFunctionName:
    Type: String
    Description: 'Name of the Lambda function running the JWT Generator'
  
  BackendUrl:
    Type: String
    Description: 'Backend URL for HTTP proxy integration (e.g., ALB, EC2)'
    Default: 'http://internal-jwt-generator-alb-123456789.us-east-1.elb.amazonaws.com'
  
  DomainName:
    Type: String
    Description: 'Custom domain name for the API (optional)'
    Default: ''
  
  CertificateArn:
    Type: String
    Description: 'ACM Certificate ARN for custom domain (optional)'
    Default: ''

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # API Gateway REST API
  JwtGeneratorApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: 'Simple JWT Generator API with OpenAPI specification'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        # Import OpenAPI specification with AWS API Gateway extensions
        openapi: '3.0.3'
        info:
          title: !Ref ApiName
          version: '1.0.0'
        servers:
          - url: !Sub 'https://${JwtGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
        # Stage variables for backend URL
        x-amazon-apigateway-policy:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'
        x-amazon-apigateway-request-validators:
          validate-body:
            validateRequestParameters: false
            validateRequestBody: true
          validate-params:
            validateRequestParameters: true
            validateRequestBody: false
          validate-all:
            validateRequestParameters: true
            validateRequestBody: true
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseTemplates:
              application/json: |
                {
                  "success": false,
                  "error": "$context.error.messageString",
                  "requestId": "$context.requestId",
                  "timestamp": "$context.requestTime"
                }
          DEFAULT_5XX:
            responseTemplates:
              application/json: |
                {
                  "success": false,
                  "error": "Internal server error",
                  "requestId": "$context.requestId",
                  "timestamp": "$context.requestTime"
                }
          THROTTLED:
            responseTemplates:
              application/json: |
                {
                  "success": false,
                  "error": "Too many requests",
                  "requestId": "$context.requestId"
                }
        paths:
          /health:
            get:
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri: !Sub '${BackendUrl}/health'
                connectionType: INTERNET
                timeoutInMillis: 5000
                requestParameters:
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
                  integration.request.header.X-API-Gateway-Request-Id: context.requestId
              responses:
                '200':
                  description: 'Health check response'
          /api/token/generate:
            post:
              x-amazon-apigateway-request-validator: validate-body
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri: !Sub '${BackendUrl}/api/token/generate'
                connectionType: INTERNET
                timeoutInMillis: 10000
                requestParameters:
                  integration.request.header.Content-Type: "'application/json'"
                  integration.request.header.X-Forwarded-For: context.identity.sourceIp
              responses:
                '200':
                  description: 'Token generated successfully'
          /api/token/validate:
            post:
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: POST
                uri: !Sub '${BackendUrl}/api/token/validate'
                connectionType: INTERNET
                timeoutInMillis: 10000
              responses:
                '200':
                  description: 'Token validation response'
          /api/jwks:
            get:
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: GET
                uri: !Sub '${BackendUrl}/api/jwks'
                connectionType: INTERNET
                timeoutInMillis: 10000
                cacheNamespace: jwks-cache
                cacheKeyParameters: []
                requestParameters:
                  integration.request.header.Cache-Control: "'public, max-age=86400'"
              responses:
                '200':
                  description: 'JWKS response'
                  headers:
                    Cache-Control:
                      type: string
          /api/auth/{proxy+}:
            any:
              x-amazon-apigateway-integration:
                type: http_proxy
                httpMethod: ANY
                uri: !Sub '${BackendUrl}/api/auth/{proxy}'
                connectionType: INTERNET
                timeoutInMillis: 15000
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.Authorization: method.request.header.Authorization
              responses:
                '200':
                  description: 'Authentication response'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref JwtGeneratorApi
      Description: !Sub 'Deployment for ${StageName} stage'

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref JwtGeneratorApi
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref StageName
      Description: !Sub '${StageName} stage for JWT Generator API'
      Variables:
        backend_url: !Ref BackendUrl
      MethodSettings:
        - ResourcePath: '/api/jwks'
          HttpMethod: 'GET'
          CachingEnabled: true
          CacheTtlInSeconds: 86400
          CacheKeyParameters: []
        - ResourcePath: '/api/.well-known/jwks.json'
          HttpMethod: 'GET'
          CachingEnabled: true
          CacheTtlInSeconds: 86400
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 1000
          ThrottlingRateLimit: 500
          LoggingLevel: INFO
          DataTraceEnabled: false
          MetricsEnabled: true
      TracingConfig:
        TracingEnabled: true

  # Usage Plan
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub '${ApiName}-usage-plan'
      Description: 'Usage plan for JWT Generator API'
      ApiStages:
        - ApiId: !Ref JwtGeneratorApi
          Stage: !Ref StageName
      Throttle:
        BurstLimit: 1000
        RateLimit: 500
      Quota:
        Limit: 100000
        Period: DAY

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub '${ApiName}-key'
      Description: 'API Key for JWT Generator API'
      Enabled: true

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  # Custom Domain (if specified)
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  # Base Path Mapping (if custom domain is used)
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref JwtGeneratorApi
      Stage: !Ref StageName

  # CloudWatch Log Group for API Gateway
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ApiName}'
      RetentionInDays: 14

Outputs:
  ApiId:
    Description: 'API Gateway ID'
    Value: !Ref JwtGeneratorApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${JwtGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CustomDomainUrl:
    Condition: HasCustomDomain
    Description: 'Custom domain URL'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CustomDomainUrl'

  ApiKeyId:
    Description: 'API Key ID'
    Value: !Ref ApiKey
    Export:
      Name: !Sub '${AWS::StackName}-ApiKeyId'

  UsagePlanId:
    Description: 'Usage Plan ID'
    Value: !Ref ApiUsagePlan
    Export:
      Name: !Sub '${AWS::StackName}-UsagePlanId'

  OpenApiSpecUrl:
    Description: 'OpenAPI Specification URL'
    Value: !Sub 'https://${JwtGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/docs/openapi.json'
    Export:
      Name: !Sub '${AWS::StackName}-OpenApiSpecUrl'

  SwaggerUIUrl:
    Description: 'Swagger UI Documentation URL'
    Value: !Sub 'https://${JwtGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/api/docs/docs'
    Export:
      Name: !Sub '${AWS::StackName}-SwaggerUIUrl'
